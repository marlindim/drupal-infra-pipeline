name: Drupal CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_to_prod:
        description: "Deploy to Production?"
        required: false
        default: "false"

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ secrets.DOCKER_USERNAME }}/my-drupal-image:latest \
            . \
            --push

      - name: Verify Docker image
        run: docker buildx imagetools inspect ${{ secrets.DOCKER_USERNAME }}/my-drupal-image:latest

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: SSH & Deploy to Staging EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.STAGING_EC2_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-drupal-image:latest
            docker stop drupal || true
            docker rm drupal || true
            docker run -d --name drupal -p 80:80 ${{ secrets.DOCKER_USERNAME }}/my-drupal-image:latest

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event.inputs.deploy_to_prod == 'true'

    steps:
      - name: SSH & Deploy to Production EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.PROD_EC2_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-drupal-image:latest
            docker stop drupal || true
            docker rm drupal || true
            docker run -d --name drupal -p 80:80 ${{ secrets.DOCKER_USERNAME }}/my-drupal-image:latest

